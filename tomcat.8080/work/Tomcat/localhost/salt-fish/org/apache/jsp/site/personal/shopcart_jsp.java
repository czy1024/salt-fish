/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.56
 * Generated at: 2020-12-04 01:46:00 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.site.personal;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.luna.saltfish.dbHandle.*;
import com.luna.saltfish.constant.*;
import com.luna.saltfish.vo.*;
import java.sql.*;
import java.util.*;
import java.text.SimpleDateFormat;

public final class shopcart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("com.luna.saltfish.constant");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.luna.saltfish.dbHandle");
    _jspx_imports_packages.add("com.luna.saltfish.vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

/*
购物车页面，被/personal.jsp包含，查找所有购物车内物品
*/
      out.write('\n');
      out.write('\n');
      out.write('\n');

    String path = request.getContextPath();
    String basePath = request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + path + "/";

      out.write('\n');

    ShopCartHandle shopCartHandle = new ShopCartHandle();
    User me = (User) session.getAttribute(UserLoginConstant.LOGIN_USER);
    UserHandle userHandle = new UserHandle();
    List<Goods> list = null;
    list = shopCartHandle.findGoodsByUser(me);


      out.write("\n");
      out.write("\n");
      out.write("<div class=\"panel panel-info\">\n");
      out.write("    <div class=\"panel-heading\">\n");
      out.write("        我的购物车\n");
      out.write("    </div>\n");
      out.write("    <div id=\"panel-body\" class=\"panel-body\">\n");
      out.write("        <div class=\"list-group\">\n");
      out.write("            ");

                if (list.size() != 0) {
                    String goodsIdList = "";
      out.write("\n");
      out.write("            <div id=\"list-goods\">");

                for (Goods good : list) {
                    goodsIdList = goodsIdList + good.getId() + ",";
                    if (good.getProducterId() == null) continue;
                    User user = userHandle.findById(good.getProducterId());
            
      out.write("\n");
      out.write("                <div id=\"list-goods-");
      out.print(good.getId() );
      out.write("\" class=\"list-group-item\">\n");
      out.write("                    <div class=\"row\">\n");
      out.write("                        <div class=\"col-md-3\">\n");
      out.write("                            <img class=\"img-rounded img-item-goods\"\n");
      out.write("                                 src=\"");
      out.print(good.getImage());
      out.write("\"/>\n");
      out.write("                        </div>\n");
      out.write("                        <div class=\"col-md-9\">\n");
      out.write("                            <div class=\"row detail-goods lead\">\n");
      out.write("                                <div>\n");
      out.write("                                    <a href=\"goods/info.jsp?goodsId=");
      out.print(good.getId());
      out.write('"');
      out.write('>');
      out.print(good.getName());
      out.write("\n");
      out.write("                                    </a>\n");
      out.write("                                    <button type=\"button\" onclick=\"shopcart_remove(");
      out.print(good.getId() );
      out.write(")\"\n");
      out.write("                                            class=\"pull-right btn btn-success\">\n");
      out.write("                                        移除\n");
      out.write("                                    </button>\n");
      out.write("                                </div>\n");
      out.write("                            </div>\n");
      out.write("                            <div class=\"row detail-goods text-muted\">价格:");
      out.print(good.getPrice());
      out.write("\n");
      out.write("                            </div>\n");
      out.write("\n");
      out.write("                            <div class=\"row detail-goods text-muted\">\n");
      out.write("                                发布者:");
if (user.getName() != null) { 
      out.print(user.getName() );
} else {
      out.print(user.getEmail());
}
      out.write("</div>\n");
      out.write("                            <div class=\"row detail-goods text-danger\">\n");
      out.write("                                时间：\n");
      out.write("                                ");

                                    java.util.Date date = good.getCreatDate();
                                    SimpleDateFormat myFmt = new SimpleDateFormat("yyyy年MM月dd日 HH:mm");
                                    String dateStr = myFmt.format(date);
                                    out.print(dateStr);
                                
      out.write("\n");
      out.write("                            </div>\n");
      out.write("                        </div>\n");
      out.write("                    </div>\n");
      out.write("                </div>\n");
      out.write("                ");
}
      out.write("</div>\n");
      out.write("            <div>\n");
      out.write("                <button id=\"buyAll\" class=\"pull-right btn btn-success\" onclick=\"buy_all()\">\n");
      out.write("                    购买全部\n");
      out.write("                </button>\n");
      out.write("            </div>\n");
      out.write("            ");

            } else {
                if (request.getParameter("info") == null) {
            
      out.write("\n");
      out.write("            购物车是空的！\n");
      out.write("            ");
} else {
      out.write("\n");
      out.write("            <div class=\"alert alert-success\"\n");
      out.write("                 role=\"alert\">");
      out.print(new String(request.getParameter("info").getBytes("UTF-8"), "UTF-8"));
      out.write("\n");
      out.write("            </div>\n");
      out.write("            ");

                    }
                }
            
      out.write("\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("</div>\n");
      out.write("<script>\n");
      out.write("    function shopcart_remove(goodsId) {\n");
      out.write("        xmlRemove = new XMLHttpRequest();\n");
      out.write("        xmlRemove.onreadystatechange = function () {\n");
      out.write("            if ((xmlRemove.readyState == 4) && (xmlRemove.status == 200)) {\n");
      out.write("                if (xmlRemove.responseText == \"success\") {\n");
      out.write("                    cnode = document.getElementById(\"list-goods-\" + goodsId);\n");
      out.write("                    cnode.parentNode.removeChild(cnode);\n");
      out.write("                    if (!(document.getElementById(\"list-goods\")).hasChildNodes()) {\n");
      out.write("                        cnode = document.getElementById(\"buyAll\");\n");
      out.write("                        cnode.parentNode.removeChild(cnode);\n");
      out.write("                    }\n");
      out.write("                    document.getElementById(\"goodsNum\").innerHTML = (parseInt(document.getElementById(\"goodsNum\").innerHTML) - 1).toString();\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        xmlRemove.open(\"GET\", \"RemoveShopCartServlet?goodsId=\" + goodsId + \"&t=\" + Math.random(), true);\n");
      out.write("        xmlRemove.send(null);\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    function buy_all() {\n");
      out.write("        xmlBuy = new XMLHttpRequest();\n");
      out.write("        xmlBuy.onreadystatechange = function () {\n");
      out.write("            if ((xmlBuy.readyState == 4) && (xmlBuy.status == 200)) {\n");
      out.write("                document.getElementById(\"panel-body\").innerHTML = xmlBuy.responseText;\n");
      out.write("                document.getElementById(\"goodsNum\").innerHTML = \"0\";\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("        xmlBuy.open(\"GET\", \"BuyAllShopcartServlet\" + \"?t=\" + Math.random(), true);\n");
      out.write("        xmlBuy.send(null);\n");
      out.write("    }\n");
      out.write("</script>\n");

    userHandle.close();
    shopCartHandle.close();

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
